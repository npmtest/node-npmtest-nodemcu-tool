{"/home/travis/build/npmtest/node-npmtest-nodemcu-tool/test.js":"/* istanbul instrument in package npmtest_nodemcu_tool */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodemcu-tool/lib.npmtest_nodemcu_tool.js":"/* istanbul instrument in package npmtest_nodemcu_tool */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nodemcu_tool = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nodemcu_tool = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nodemcu-tool/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nodemcu-tool && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nodemcu_tool */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nodemcu_tool\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nodemcu_tool.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nodemcu_tool.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nodemcu_tool.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nodemcu_tool.__dirname + '/lib.npmtest_nodemcu_tool.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodemcu-tool/node_modules/nodemcu-tool/lib/NodeMCU-Tool.js":"var _fs = require('fs');\nvar _nodeMcuConnector = require('./NodeMcuConnector');\nvar _serialTerminal = require('./SerialTerminal');\nvar _path = require('path');\nvar _loggingFacility = require('logging-facility');\n\n// NodeMCU-Tool Context Logger\nvar _logger = _loggingFacility.getLogger('NodeMCU-Tool');\n\n// NodeMCU Context Logger\nvar _mculogger = _loggingFacility.getLogger('NodeMCU');\n\n// Serial Terminal Context Logger\nvar _terminallogger = _loggingFacility.getLogger('SerialTerminal');\n\n// output\nvar outputHandler = function(message){\n    console.log(message);\n};\n\nvar writeOutput = function(message){\n    if (outputHandler){\n        outputHandler(message);\n    }\n};\n\n// global options\nvar _options = {\n    // serial port baudrate\n    baudrate: 115200,\n\n    // serial device connected to nodemcu\n    device: '/dev/ttyUSB0',\n\n    // delay after opening the connection\n    connectionDelay: 0\n};\n\n// Programmatic Access to the core functions\nvar Tool = {\n\n    // access the connector directly\n    Connector: _nodeMcuConnector,\n\n    // set output handler\n    onOutput: function (handler) {\n        outputHandler = handler;\n    },\n\n    // set connector options\n    setOptions: function(opt){\n        // merge with default options\n        Object.keys(_options).forEach(function(key){\n            _options[key] = opt[key] || _options[key];\n        });\n    }\n};\n\n// helper function to create a NodeMCU Tool Connection\nvar getConnection = function(cb){\n\n    // create new connector\n    var connector = new _nodeMcuConnector(_options.device, _options.baudrate);\n\n    // open connection with connection check\n    connector.connect(function(error, response){\n        if (error) {\n            _logger.error('Unable to establish connection - ' + error);\n\n            // finished!\n            connector.disconnect();\n        }else{\n            // status message\n            _logger.log('Connected');\n            _mculogger.log(response);\n\n            cb(connector);\n        }\n    }, true, _options.connectionDelay);\n};\n\n// show file-system info\nTool.fsinfo = function(format){\n\n    // try to establish a connection to the module\n    getConnection(function(connector){\n\n        connector.fsinfo(function(err, meta, files){\n\n            // finished!\n            connector.disconnect();\n\n            if (err){\n                _logger.error(err);\n            }else{\n\n                // json output - third party applications\n                if (format == 'json') {\n                    writeOutput(JSON.stringify({\n                        files: files,\n                        meta: meta\n                    }));\n\n                // raw format - suitable for use in bash scripts\n                }else if (format == 'raw'){\n                    // print fileinfo\n                    files.forEach(function(file){\n                        writeOutput(file.name);\n                    });\n\n                }else{\n                    _mculogger.log('Free Disk Space: ' + meta.remaining + ' KB | Total: ' + meta.total + ' KB | ' + files.length + ' Files');\n\n                    // files found ?\n                    if (files.length==0){\n                        _mculogger.log('No Files found - have you created the file-system?');\n                    }else{\n                        _mculogger.log('Files stored into Flash (SPIFFS)');\n\n                        // print fileinfo\n                        files.forEach(function(file){\n                            writeOutput('\\t  |- ' + file.name + ' (' + file.size + ' Bytes)');\n                        });\n                    }\n                }\n            }\n        });\n    });\n};\n\n// upload a local file to nodemcu\nTool.upload = function(localFiles, options, onProgess){\n\n    // the index of the current uploaded file\n    var fileUploadIndex = 0;\n\n    var uploadFile = function(connector, localFile, remoteFilename, onComplete){\n\n        // increment upload index\n        fileUploadIndex++;\n\n        // get file stats\n        try{\n            var fileInfo = _fs.statSync(localFile);\n            \n            // check if file is directory\n            if (fileInfo.isDirectory()) {\n                _mculogger.error('Path \"' + localFile + '\" is a directory.');\n                onComplete();\n                return;\n            }\n\n        // local file available\n        } catch (err){\n            _logger.error('Local file not found \"' + localFile + '\" skipping...');\n            onComplete();\n            return;\n        }\n\n        // display filename\n        _logger.log('Uploading \"' + localFile + '\" >> \"' + remoteFilename + '\"...');\n\n        // trigger a progress update\n        onProgess(0, fileInfo.size, fileUploadIndex);\n\n        // normalize the remote filename (strip relative parts)\n        remoteFilename = remoteFilename.replace(/\\.\\.\\//g, '').replace(/\\.\\./g, '').replace(/^\\.\\//, '');\n\n        // delete old file (may existent)\n        connector.removeFile(remoteFilename, function(err){\n\n            // handle error\n            if (err){\n                connector.disconnect();\n                _logger.error(err);\n                return;\n            }\n\n            // start the file transfer\n            connector.upload(localFile, remoteFilename, options,\n\n                // onComplete\n                function(err){\n\n                    // handle error\n                    if (err){\n                        connector.disconnect();\n                        _logger.error(err);\n                        return;\n                    }\n\n                    // compile flag set ? and is a lua file ?\n                    if (options.compile && _path.extname(localFile).toLowerCase() == '.lua'){\n                        _mculogger.log(' |- compiling lua file..');\n\n                        connector.compile(remoteFilename, function(error){\n                            // success ? empty line will return (null)\n                            if (error){\n                                connector.disconnect();\n                                _mculogger.error('Error: ' + error);\n                            }else{\n                                _mculogger.log(' |- success');\n\n                                // drop original lua file\n                                connector.removeFile(remoteFilename, function(error){\n\n                                    if (error){\n                                        connector.disconnect();\n                                        _mculogger.error('Error: ' + error);\n                                        return;\n                                    }\n\n                                    _mculogger.log(' |- original Lua file removed');\n                                    onComplete();\n                                });\n                            }\n                        });\n                    }else{\n                        // directly call complete handler\n                        onComplete();\n                    }\n                },\n\n                // on progress handler\n                function(current, total){\n                    // proxy and append file-number\n                    onProgess(current, total, fileUploadIndex);\n                }\n            );\n        });\n    };\n\n    // try to establish a connection to the module\n    getConnection(function(connector){\n\n        // single file upload ?\n        if (localFiles.length == 1){\n            // extract first element\n            var localFile = localFiles[0];\n\n            // filename defaults to original filename minus path.\n            // this behaviour can be overridden by --keeppath and --remotename options\n            var remoteFile = options.remotename ? options.remotename : (options.keeppath ? localFile : _path.basename(localFile));\n\n            // start single file upload\n            uploadFile(connector, localFile, remoteFile, function(){\n                // close connection\n                connector.disconnect();\n\n                // log message\n                _logger.log('File Transfer complete!');\n            });\n\n        // bulk upload ?\n        }else{\n\n            var uploadNext = function(){\n\n                // file available ?\n                if (localFiles.length > 0){\n\n                    // extract file\n                    var localFile = localFiles.shift();\n\n                    // keep-path option set ?\n                    var remoteFile = (options.keeppath ? localFile : _path.basename(localFile));\n\n                    // trigger upload\n                    uploadFile(connector, localFile, remoteFile, uploadNext);\n\n                // no more file available\n                }else{\n                    // close connection\n                    connector.disconnect();\n\n                    // log message\n                    _logger.log('Bulk File Transfer complete!');\n                }\n            };\n\n            // trigger initial upload\n            uploadNext();\n        }\n    });\n};\n\n// download a remote file from nodemcu\nTool.download = function(remoteFile){\n    // strip path\n    var localFilename = _path.basename(remoteFile);\n\n    // local file with same name already available ?\n    if (_fs.existsSync(remoteFile)){\n        // change filename\n        localFilename += '.' + (new Date().getTime());\n\n        _logger.log('Local file \"' + remoteFile + '\" already exist - new file renamed to \"' + localFilename + '\"');\n    }\n\n    // try to establish a connection to the module\n    getConnection(function(connector){\n        _logger.log('Downloading \"' + remoteFile + '\" ...');\n\n        connector.download(remoteFile,\n            // onComplete\n            function(err, filedata){\n                // finished!\n                connector.disconnect();\n\n                if (err){\n                    _logger.error('Data Transfer FAILED!');\n                }else{\n                    _logger.log('Data Transfer complete!');\n\n                    // store local file\n                    _fs.writeFileSync(localFilename, filedata);\n\n                    _logger.log('File \"' + localFilename + '\" created');\n                }\n            }\n        );\n    });\n};\n\n// run a file on NodeMCU (.lc or .lua)\nTool.run = function(filename){\n\n    // try to establish a connection to the module\n    getConnection(function(connector){\n        connector.run(filename, function(err, output){\n            // finished!\n            connector.disconnect();\n\n            if (err){\n                _mculogger.error(err);\n            }else{\n                // show command response\n                _mculogger.log('Running \"' + filename + '\"');\n                _mculogger.log('>----------------------------->');\n                writeOutput(output);\n                _mculogger.log('>----------------------------->');\n            }\n        });\n    });\n};\n\n// removes a file from NodeMCU\nTool.remove = function(filename){\n\n    // try to establish a connection to the module\n    getConnection(function(connector){\n        connector.removeFile(filename, function(err){\n            // finished!\n            connector.disconnect();\n\n            if (err){\n                _mculogger.error(err);\n            }else{\n                // just show complete message (no feedback from nodemcu)\n                _mculogger.log('File \"' + filename + '\" removed!');\n            }\n        });\n    });\n};\n\n// format the file system\nTool.mkfs = function(){\n\n    // try to establish a connection to the module\n    getConnection(function(connector){\n\n        _mculogger.log('Formatting the file system...this will take around ~30s');\n\n        connector.format(function(err, response){\n            // finished!\n            connector.disconnect();\n\n            if (err){\n                _mculogger.error('Formatting failed - ' + err);\n            }else{\n                // just show complete message\n                _mculogger.log('File System created | ' + response);\n            }\n        });\n    });\n};\n\n// serial terminal <> console session\nTool.terminal = function(initialCommand){\n    // create new connector\n    var terminal = new _serialTerminal();\n\n    _terminallogger.log('Starting Terminal Mode - press ctrl+c to exit');\n\n    // run initial command before starting terminal session ?\n    if (initialCommand){\n        terminal.onConnect(function(device){\n            device.write(initialCommand + '\\n');\n        });\n    }\n\n    // start\n    terminal.passthrough(_options.device, _options.baudrate, function(err){\n        if (err){\n            _terminallogger.error(err);\n        }else{\n            _terminallogger.log('Connection closed');\n        }\n    });\n};\n\n// show serial devices connected to the system\nTool.devices = function(showAll, jsonOutput){\n    // create new connector\n    var connector = new _nodeMcuConnector(_options.device, _options.baudrate);\n\n    // retrieve the device list (not bound to an opened connection)\n    connector.deviceInfo(showAll, function(err, devices){\n        if (err){\n            _mculogger.error('Cannot retrieve serial device list - ' + err);\n        }else{\n\n            if (jsonOutput){\n                writeOutput(JSON.stringify(devices));\n            }else{\n                // just show complete message\n                if (devices.length == 0){\n                    _mculogger.error('No Connected Devices found | Total: ' + devices.length);\n                }else{\n                    _mculogger.log('Connected Devices | Total: ' + devices.length);\n\n                    // print fileinfo\n                    devices.forEach(function(device){\n                        writeOutput('\\t  |- ' + device.comName + ' (' + device.manufacturer + ', ' + device.pnpId + ')');\n                    });\n                }\n            }\n        }\n    });\n};\n\n// Reset of the NodeMCU Module\nTool.reset = function(){\n\n    // create new connector\n    var connector = new _nodeMcuConnector(_options.device, _options.baudrate);\n\n    // open connection without connection check\n    connector.connect(function(error, response){\n        if (error) {\n            _logger.error('Unable to establish connection - ' + error);\n        }else{\n            // status message\n            _logger.log('Connected');\n\n            // execute reset\n            connector.reset(function(err){\n                // finished!\n                connector.disconnect();\n\n                if (err){\n                    _mculogger.error(err);\n                }else{\n                    _mculogger.log('Hard-Reset executed (100ms)');\n                }\n            })\n        }\n    }, false);\n};\n\n// Reset of the NodeMCU Module\nTool.softreset = function(){\n\n    // try to establish a connection to the module\n    getConnection(function(connector){\n\n        connector.softreset(function(err){\n            // finished!\n            connector.disconnect();\n\n            if (err){\n                _mculogger.error(err);\n            }else{\n                _mculogger.log('Soft-Reset executed (node.restart())');\n            }\n        });\n\n    });\n};\n\nmodule.exports = Tool;\n","/home/travis/build/npmtest/node-npmtest-nodemcu-tool/node_modules/nodemcu-tool/lib/NodeMcuConnector.js":"var _virtualTerminal = require('./ScriptableSerialTerminal');\nvar _serialport = require('serialport');\nvar _fs = require('fs');\nvar _path = require('path');\nvar _luaOptimizer = require('./LuaOptimizer');\nvar _luaCommandBuilder = require('./LuaCommandBuilder');\n\n// NodeMCU-Connector Context Logger\nvar _logger = require('logging-facility').getLogger('NodeMCU-Connector');\n\n// constructor\nfunction NodeMcuConnector(devicename, baudrate){\n    // new terminal line sequence \"\\n\\r>\"\n    this.device = new _virtualTerminal([13,10,62]);\n    this.errorHandler = null;\n    this.isConnected = false;\n    this.name = devicename;\n    this.baudrate = baudrate;\n    this.isHexWriteHelperUploaded = false;\n\n    // handle low level errors\n    this.device.onError(function(err){\n        // proxy\n        if (this.errorHandler){\n            this.errorHandler.apply(this, [err]);\n\n        // default: std logger\n        }else{\n            _logger.error(err);\n        }\n    }.bind(this));\n}\n\n// open the serial connection\nNodeMcuConnector.prototype.connect = function(cb, applyConnectionCheck, connectDelay){\n\n    // try to open the device\n    this.device.open(this.name, this.baudrate, function(error){\n        if (error){\n            cb('Cannot open port \"' + this.name + '\"', null);\n        }else{\n            // skip connection check ?\n            if (applyConnectionCheck === false){\n                // set connect flag\n                this.isConnected = true;\n\n                // run callback\n                cb(null, 'Skipping Connection Check..');\n                return;\n            }\n\n            var checkConnection = function(){\n                this.checkConnection(function(error){\n                    if (error){\n                        cb(error, null);\n                    }else{\n                        this.isConnected = true;\n\n                        // print data\n                        this.fetchDeviceInfo(function(error, data){\n                            if (error){\n                                cb(error, null);\n                            }else{\n                                // show nodemcu device info\n                                cb(null, 'Version: ' + data.version + ' | ChipID: 0x' + data.chipID + ' | FlashID: 0x' + data.flashID);\n                            }\n                        });\n                    }\n                }.bind(this));\n            }.bind(this);\n\n            // delay the connection process ? may fix issues related to rebooting modules\n            if (connectDelay && connectDelay > 1){\n                setTimeout(function(){\n\n                    // send dummy sequence\n                    this.device.write('\\n\\n\\n'  + _luaCommandBuilder.command.echo + '\\n\\n\\n' , function(){\n\n                        // wait 1/3 to get the dummy sequence processed\n                        setTimeout(function(){\n\n                            // send dummy sequence\n                            this.device.write('\\n\\n\\n'  + _luaCommandBuilder.command.echo + '\\n\\n\\n' , function(){\n\n                                // wait 1/3 to get the dummy sequence processed\n                                setTimeout(function(){\n\n                                    // purge received data\n                                    this.device.purge(function(){\n                                        // connection startup\n                                        checkConnection();\n                                    }.bind(this));\n\n                                }.bind(this), connectDelay);\n\n                            }.bind(this));\n\n                        }.bind(this), connectDelay);\n\n                    }.bind(this));\n\n                // 2/3 timeout\n                }.bind(this), connectDelay);\n            }else{\n                checkConnection();\n            }\n        }\n    }.bind(this));\n};\n\n// close the serial connection\nNodeMcuConnector.prototype.disconnect = function(){\n    this.isConnected = false;\n    this.device.close();\n};\n\n// set main error handler\nNodeMcuConnector.prototype.onError = function(cb){\n    this.errorHandler = cb;\n};\n\n// checks the node-mcu connection\nNodeMcuConnector.prototype.checkConnection = function(cb){\n\n    // 1.5s connection timeout\n    var watchdog = setTimeout(function(){\n        // stop\n        watchdog = null;\n\n        // throw error\n        cb('Timeout, no response detected - is NodeMCU online and the Lua interpreter ready ?');\n    }, 1500);\n\n    // proxy function to stop timer\n    var ready = function(err){\n        // watchdog active ?\n        if (watchdog !== null){\n            // stop watchdog\n            clearTimeout(watchdog);\n\n            // run callback\n            cb(err);\n        }\n    };\n\n    // send a simple print command to the lua engine\n    this.device.executeCommand(_luaCommandBuilder.command.echo, function(err, echo, output){\n        if (err){\n            ready(err);\n        }else{\n            // validate command echo and command output\n            if (output == 'echo1337' && echo == 'print(\"echo1337\")') {\n                ready(null);\n            } else {\n                ready('No response detected - is NodeMCU online and the Lua interpreter ready ?')\n            }\n        }\n    });\n};\n\n// fetch nodemcu device info\nNodeMcuConnector.prototype.fetchDeviceInfo = function(cb){\n    // run the node.info() command\n    this.device.executeCommand(_luaCommandBuilder.command.nodeInfo, function(err, echo, data){\n        if (err){\n            cb(err);\n        }else {\n            // replace whitespaces with single delimiter\n            var p = data.replace(/\\s+/gi, '-').split('-');\n\n            if (p.length != 8) {\n                cb('Invalid node.info() Response: ' + data, null);\n            } else {\n                // process data\n                cb(null, {\n                    version: p[0] + '.' + p[1] + '.' + p[2],\n                    chipID: parseInt(p[3]).toString(16),\n                    flashID: parseInt(p[4]).toString(16),\n                    flashsize: p[5] + 'kB',\n                    flashmode: p[6],\n                    flashspeed: parseInt(p[7]) / 1000000 + 'MHz'\n                });\n            }\n        }\n    });\n};\n\n// upload a local file to NodeMCU\n/**\n * Upload a local file to NodeMCU\n * @param localName the original filename\n * @param remoteName the destination name\n * @param options\n * @param completeCb\n * @param progressCb\n */\nNodeMcuConnector.prototype.upload = function(localName, remoteName, options, completeCb, progressCb){\n  \n    // check connect flag\n    if (!this.isConnected){\n        completeCb('Cannot upload file - device offline', null);\n        return;\n    }\n\n    // get file content\n    var rawContent = _fs.readFileSync(localName);\n\n    // remove lua comments and empty lines ?\n    if (options.optimize && _path.extname(localName).toLowerCase() == '.lua'){\n        // apply optimizations\n        rawContent = _luaOptimizer.optimize(rawContent);\n    }\n\n    // convert buffer to hex\n    var content = rawContent.toString('hex');\n\n    // get absolute filesize\n    var absoluteFilesize = rawContent.length;\n\n    // split file content into chunks\n    var chunks = content.match(/.{1,232}/g);\n\n    // wrapper to start the transfer\n    var startTransfer = function(){\n        // open remote file for write\n        this.device.executeCommand(_luaCommandBuilder.prepare('fileOpen', [remoteName, 'w+']), function(err, echo, response){\n            // successful opened ?\n            if (err || response == 'nil'){\n                completeCb('Cannot open remote file \"' + remoteName + '\" for write - ' + err);\n                return;\n            }\n\n            var currentUploadSize = 0;\n\n            // initial progress update\n            progressCb.apply(progressCb, [0, absoluteFilesize]);\n\n            var writeChunk = function(){\n                if (chunks.length > 0){\n                    // get first element\n                    var l = chunks.shift();\n\n                    // increment size counter\n                    currentUploadSize += l.length/2 ;\n\n                    // write first element to file\n                    this.device.executeCommand('__hexwrite(\"' + l + '\")', function(err, echo, response){\n                        if (err){\n                            completeCb('Cannot write chunk to remote file - ' + err, null);\n                            return;\n                        }\n\n                        // run progress callback\n                        progressCb.apply(progressCb, [currentUploadSize, absoluteFilesize]);\n\n                        // write next line\n                        writeChunk();\n                    });\n                }else{\n                    // send file close command\n                    this.device.executeCommand(_luaCommandBuilder.command.fileCloseFlush, function(err, echo, response){\n                        if (err){\n                            completeCb('Cannot flush/close remote file - ' + err, null);\n                        }else{\n                            completeCb(null, absoluteFilesize);\n                        }\n\n                    });\n                }\n\n            }.bind(this);\n\n            // start transfer\n            writeChunk();\n\n        }.bind(this));\n    }.bind(this);\n\n\n    // hex write helper already uploaded within current session ?\n    if (this.isHexWriteHelperUploaded){\n        // start transfer directly\n        startTransfer();\n\n    // otherwise upload helper\n    }else{\n        // transfer helper function to decode hex data\n        this.device.executeCommand(_luaCommandBuilder.command.hexWriteHelper, function(err, echo, response) {\n            // successful opened ?\n            if (err) {\n                completeCb('Cannot transfer hex.decode helper function - ' + err);\n                return;\n            }\n\n            // set flag\n            this.isHexWriteHelperUploaded = true;\n\n            // start file transfer on upload complete\n            startTransfer();\n        });\n    }\n};\n\n// show filesystem information\nNodeMcuConnector.prototype.fsinfo = function(cb){\n    // check connect flag\n    if (!this.isConnected){\n        cb('Cannot fetch file system info - device offline', null);\n        return;\n    }\n\n    // get file system info (size)\n    this.device.executeCommand(_luaCommandBuilder.command.fsInfo, function(err, echo, response){\n        if (err){\n            cb('Cannot fetch file system metadata - ' + err, null);\n            return;\n        }\n\n        // extract size (remaining, used, total)\n        response = response.replace(/\\s+/gi, '-').split('-');\n\n        var toKB = function(s){\n            return parseInt((parseInt(s)/1024));\n        };\n\n        var meta = {\n            remaining: toKB(response[0]),\n            used: toKB(response[1]),\n            total: toKB(response[2])\n        };\n\n        // print a full file-list including size\n        this.device.executeCommand(_luaCommandBuilder.command.listFiles, function(err, echo, response){\n            if (err){\n                cb('Cannot obtain file-list - ' + err, null);\n                return;\n            }\n\n            // file-list to return\n            var files = [];\n\n            // files available (list not empty) ?\n            if (response.length > 0){\n                // split the file-list by \";\"\n                var entries = response.trim().split(';');\n\n                // process each entry\n                entries.forEach(function(entry){\n                    // entry format: <name>:<size>\n                    var matches = /^(.*):(\\d+)$/gi.exec(entry);\n\n                    // valid format ?\n                    if (matches){\n                        // append file entry to list\n                        files.push({\n                            name: matches[1],\n                            size: parseInt(matches[2])\n                        });\n                    }\n                });\n            }\n\n            // run callback\n            cb(null, meta, files);\n        });\n    }.bind(this));\n};\n\n// delete a file from remote filesystem\nNodeMcuConnector.prototype.removeFile = function(remoteName, cb){\n    // check connect flag\n    if (!this.isConnected){\n        cb('Cannot remove remote file - device offline', null);\n        return;\n    }\n\n    // get file system info (size)\n    this.device.executeCommand(_luaCommandBuilder.prepare('fileRemove', [remoteName]), function(err, echo, response){\n        if (err){\n            cb('IO Error - ' + err, null);\n        }else{\n            cb(null, response);\n        }\n    }.bind(this));\n};\n\n// format the filesystem\nNodeMcuConnector.prototype.format = function(cb){\n    // check connect flag\n    if (!this.isConnected){\n        cb('Cannot format file system - device offline', null);\n        return;\n    }\n\n    // get file system info (size)\n    this.device.executeCommand(_luaCommandBuilder.command.fsFormat, function(err, echo, response){\n        if (err){\n            cb('IO Error - ' + err, null);\n        }else{\n            cb(null, response);\n        }\n    }.bind(this));\n};\n\n// compile a remote file\nNodeMcuConnector.prototype.compile = function(remoteName, cb){\n    // check connect flag\n    if (!this.isConnected){\n        cb('Cannot compile remote file - device offline', null);\n        return;\n    }\n\n    // run the lua compiler/interpreter to cache the file as bytecode\n    this.device.executeCommand(_luaCommandBuilder.prepare('compile', [remoteName]), function(err, echo, response){\n        if (err){\n            cb('IO Error - ' + err, null);\n        }else{\n            cb(null, response);\n        }\n    }.bind(this));\n};\n\n// execute a remote file\nNodeMcuConnector.prototype.run = function(remoteName, cb){\n    // check connect flag\n    if (!this.isConnected){\n        cb('Cannot execute remote file - device offline', null);\n        return;\n    }\n\n    // run the lua compiler/interpreter to cache the file as bytecode\n    this.device.executeCommand(_luaCommandBuilder.prepare('run', [remoteName]), function(err, echo, response){\n        if (err){\n            cb('IO Error - ' + err, null);\n        }else{\n            cb(null, response);\n        }\n\n    }.bind(this));\n};\n\n// LOW LEVEL - run a lua command directly\nNodeMcuConnector.prototype.executeCommand = function(cmd, cb){\n    // check connect flag\n    if (!this.isConnected){\n        cb('Cannot execute remote file - device offline', null);\n        return;\n    }\n\n    // run the lua interpreter\n    this.device.executeCommand(cmd, cb);\n};\n\n\n// download a file from NodeMCU\nNodeMcuConnector.prototype.download = function(remoteName, cb){\n    // check connect flag\n    if (!this.isConnected){\n        cb('Cannot download file - device offline', null);\n        return;\n    }\n\n    // transfer helper function to encode hex data\n    this.device.executeCommand(_luaCommandBuilder.command.hexReadHelper, function(err, echo, response) {\n        // successful opened ?\n        if (err) {\n            cb('Cannot transfer hex.encode helper function - ' + err);\n            return;\n        }\n\n        // open remote file for write\n        this.device.executeCommand(_luaCommandBuilder.prepare('fileOpen', [remoteName, 'r']), function(err, echo, response){\n            // successful opened ?\n            if (err || response == 'nil'){\n                cb('Cannot open remote file \"' + remoteName + '\" for read - ' + err);\n                return;\n            }\n\n            // write first element to file\n            this.device.executeCommand('__hexread()', function(err, echo, filecontent){\n                if (err){\n                    cb('Cannot read remote file content - ' + err, null);\n                    return;\n                }\n\n                // decode file content\n                var data = new Buffer(filecontent, 'hex');\n\n                // send file close command\n                this.device.executeCommand(_luaCommandBuilder.command.fileClose, function(err, echo, response){\n                    if (err){\n                        cb('Cannot close remote file - ' + err, null);\n                    }else{\n                        cb(null, data);\n                    }\n                });\n\n            }.bind(this));\n\n        }.bind(this));\n\n    }.bind(this));\n};\n\n// show connected serial devices\nNodeMcuConnector.prototype.deviceInfo = function(showAll, cb){\n    // get all available serial ports\n    _serialport.list(function (err, ports){\n        // error occurred ?\n        if (err){\n            cb(err);\n            return;\n        }\n\n        // default condition\n        ports = ports || [];\n\n        // just pass-through\n        if (showAll){\n            cb(null, ports);\n\n            // filter by vendorIDs\n            // NodeMCU v1.0 - CH341 Adapter | 0x1a86  QinHeng Electronics\n            // NodeMCU v1.1 - CP2102 Adapter | 0x10c4  Cygnal Integrated Products, Inc\n        }else{\n            cb(null, ports.filter(function(item){\n                return (item.vendorId == '0x1a86' || item.vendorId == '0x10c4');\n            }));\n        }\n    });\n};\n\n// reset NodeMCU devkit - compatible with devices using rts/dtr reset/programming circuit\n// @see https://github.com/nodemcu/nodemcu-devkit-v1.0/blob/master/NODEMCU_DEVKIT_V1.0.PDF Page #3\n// Reset => DTR=1, RTS=0\nNodeMcuConnector.prototype.reset = function(cb){\n    // check connect flag\n    if (!this.isConnected){\n        cb('Cannot reset module - device offline', null);\n        return;\n    }\n\n    var d = this.device;\n\n    // pull down RST pin using the reset circuit\n    d.flowcontrol({\n        dtr: false,\n        rts: true\n    }, function(err){\n        if (err){\n            cb(err);\n\n            // restore previous state after 100ms\n        }else{\n            setTimeout(function(){\n                d.flowcontrol({\n                    dtr: false,\n                    rts: false\n                }, cb);\n            }, 100);\n        }\n    });\n};\n\n// Software Reset using node.restart() command\nNodeMcuConnector.prototype.softreset = function(cb){\n    // check connect flag\n    if (!this.isConnected){\n        cb('Cannot reset module - device offline', null);\n        return;\n    }\n\n    // transfer helper function to encode hex data\n    this.device.executeCommand(_luaCommandBuilder.command.reset, function(err, echo, response) {\n        // successful opened ?\n        if (err) {\n            cb('Cannot execute soft-reset command - ' + err);\n            return;\n        }\n\n        cb(null);\n    });\n};\n\nmodule.exports = NodeMcuConnector;\n","/home/travis/build/npmtest/node-npmtest-nodemcu-tool/node_modules/nodemcu-tool/lib/ScriptableSerialTerminal.js":"var _serialport = require('serialport');\n\n// NodeMCU-Connector Context Logger\nvar _logger = require('logging-facility').getLogger('NodeMCU-SerialConnection');\n\n/**\n * Virtual Terminal to interact programmatical & asynchronous with a serial terminal\n * @constructor\n */\nfunction ScriptableSerialTerminal(delimiterSequence){\n    this.device = null;\n    this.inputbuffer = [];\n    this.waitingForInput = null;\n    this.errorHandler = null;\n    this.delimiterSequence = delimiterSequence;\n    this.encoding = 'utf8';\n}\n\nScriptableSerialTerminal.prototype.onError = function(cb){\n    this.errorHandler = cb;\n};\n\nScriptableSerialTerminal.prototype.open = function(devicename, baudrate, cb){\n\n    // try to open the serial port\n    this.device = new _serialport(devicename, {\n        baudrate: parseInt(baudrate),\n        parser: _serialport.parsers.byteDelimiter(this.delimiterSequence),\n        autoOpen: false\n    });\n\n    // handle errors\n    this.device.on('error', function(error){\n        // proxy\n        if (this.errorHandler){\n            this.errorHandler.apply(this, [error]);\n        }else{\n            _logger.error(error);\n        }\n\n        // device opened ?\n        if (this.device.isOpen()){\n            this.device.close();\n        }\n    }.bind(this));\n\n    // listen on incoming data\n    this.device.on('data', function(input){\n\n        // strip delimiter sequence from array\n        input.splice(input.length-this.delimiterSequence.length, this.delimiterSequence.length);\n\n        // convert byte array UTF8 to string;\n        input = (new Buffer(input)).toString(this.encoding);\n\n        // response data object - default no response data\n        var data = {\n            echo: input,\n            response: null\n        };\n\n        // response found ? split echo and response\n        var splitIndex = input.indexOf('\\n');\n        if (splitIndex > 0){\n            data.echo = input.substr(0, splitIndex).trim();\n            data.response = input.substr(splitIndex + 1).trim();\n        }\n\n        // process waiting for input ?\n        if (this.waitingForInput){\n            var t = this.waitingForInput;\n            this.waitingForInput = null;\n            t.apply(t, [data])\n        }else{\n            this.inputbuffer.push(data);\n        }\n\n    }.bind(this));\n\n    // open connection\n    this.device.open(cb);\n};\n\n// close instance\nScriptableSerialTerminal.prototype.close = function(){\n    if (this.device.isOpen()){\n        this.device.close();\n    }\n};\n\n// wait for next echo + response line\nScriptableSerialTerminal.prototype.getNextResponse = function(cb){\n    if (this.inputbuffer.length > 0){\n        cb(this.inputbuffer.shift());\n    }else{\n        // add as waiting instance (no concurrent!)\n        this.waitingForInput = cb;\n    }\n};\n\n// write data to serial port and wait for transmission complete\nScriptableSerialTerminal.prototype.write = function(data, cb){\n    this.device.write(data, function(error){\n        if (error){\n            cb(error, null);\n        }else{\n            this.device.drain(cb);\n        }\n    }.bind(this));\n};\n\n// send a command to the lua engine and capture command echo and output (response)\nScriptableSerialTerminal.prototype.executeCommand = function(command, cb){\n    // send command\n    this.write(command + '\\n', function(error){\n        // write successful ?\n        if (error) {\n            cb('Cannot run command: ' + error, null);\n        }else{\n            // get echo\n            this.getNextResponse(function(data){\n                cb(null, data.echo, data.response);\n            }.bind(this));\n        }\n    }.bind(this));\n};\n\n// remove unread input\nScriptableSerialTerminal.prototype.purge = function(cb){\n    // flush input buffer\n    this.device.flush(function(error){\n        // flush readline buffer\n        this.inputbuffer = [];\n\n        // run callback\n        if (cb){\n            cb.apply(this, [error]);\n        }\n    }.bind(this));\n};\n\n// set flow-control control\nScriptableSerialTerminal.prototype.flowcontrol = function(options, cb){\n    this.device.set(options, cb);\n};\n\n\nmodule.exports = ScriptableSerialTerminal;","/home/travis/build/npmtest/node-npmtest-nodemcu-tool/node_modules/nodemcu-tool/lib/LuaOptimizer.js":"\n// strip comments and whitespaces from lua content\nfunction optimizeLuaContent(rawContent){\n    // apply optimizations\n    var t = rawContent.toString('utf-8')\n        .replace(/--.*$/gim, '')\n        .replace(/(\\r\\n|\\n\\r|\\n|\\r)+/g, '$1')\n        .replace(/^\\s+/gm, '')\n        .trim();\n\n    // re-convert to buffer\n    return new Buffer(t, 'utf-8');\n};\n\nmodule.exports = {\n    optimize: optimizeLuaContent\n};","/home/travis/build/npmtest/node-npmtest-nodemcu-tool/node_modules/nodemcu-tool/lib/LuaCommandBuilder.js":"// lua command templates - central location for easier debugging\nvar lua_commands = {\n    // connection info echo command,\n    echo: 'print(\"echo1337\")',\n\n    // info command (flash id)\n    nodeInfo: 'print(node.info());',\n\n    // file system info\n    fsInfo: 'print(file.fsinfo())',\n\n    // format the file system\n    fsFormat: 'file.format()',\n\n    // compile a remote file\n    compile: 'node.compile(\"?\")',\n\n    // run a file\n    run: 'dofile(\"?\")',\n\n    // soft-reset\n    reset: 'node.restart()',\n\n    // list files on SPIFFS\n    listFiles: 'local l = file.list();for k,v in pairs(l) do uart.write(0,k..\":\"..v..\";\") end print(\"\")',\n\n    // file open\n    fileOpen: 'print(file.open(\"?\", \"?\"))',\n\n    // close a opened file\n    fileClose: 'file.close()',\n\n    // remove file\n    fileRemove: 'file.remove(\"?\")',\n\n    // file close & flush\n    fileCloseFlush: 'file.flush() file.close()',\n\n    // helper function to write hex encoded content to file\n    hexWriteHelper: \"function __hexwrite(s) for c in s:gmatch('..') do file.write(string.char(tonumber(c, 16))) end end\",\n\n    // helper function to read file as hex and write content to uart\n    hexReadHelper: \"function __hexread() while true do c = file.read(1) if c == nil then print('') break end uart.write(0, string.format('%02X', string.byte(c))) end end\"\n};\n\n// prepare command be escaping args\nvar luaPrepare = function(commandName, args){\n    // get command by name\n    var command = lua_commands[commandName] || null;\n\n    // valid command name provided ?\n    if (command == null){\n        return null;\n    }\n\n    // replace all placeholders with given args\n    args.forEach(function(arg){\n        // simple escaping quotes\n        arg = arg.replace(/[^\\\\]\"/g, '\\\"');\n\n        // apply arg\n        command = command.replace(/\\?/, arg);\n    });\n\n    return command;\n};\n\nmodule.exports = {\n    command: lua_commands,\n    prepare: luaPrepare\n};","/home/travis/build/npmtest/node-npmtest-nodemcu-tool/node_modules/nodemcu-tool/lib/SerialTerminal.js":"var _serialport = require('serialport');\n\n// SerialTerminal Context Logger\nvar _logger = require('logging-facility').getLogger('SerialTerminal');\n\n/**\n * Serial Terminal - bridges serial port to stdin/stdout\n * @constructor\n */\nfunction SerialTerminal(){\n    this.device = null;\n    this.errorHandler = null;\n    this.connectHandler = null;\n    this.encoding = 'utf8';\n}\n\nSerialTerminal.prototype.onConnect = function(cb){\n    this.connectHandler = cb;\n};\n\nSerialTerminal.prototype.passthrough = function(devicename, baudrate, cb){\n\n    // try to open the serial port\n    this.device = new _serialport(devicename, {\n        baudrate: parseInt(baudrate),\n        parser: _serialport.parsers.byteLength(1),\n        autoOpen: false\n    });\n\n    // handle errors\n    this.device.on('error', function(err){\n        // proxy\n        _logger.error(err);\n\n        // device opened ?\n        if (this.device.isOpen()){\n            this.device.close();\n        }\n    }.bind(this));\n\n    // listen on incoming data\n    this.device.on('data', function(input){\n        process.stdout.write(input);\n    }.bind(this));\n\n    // open connection\n    this.device.open(function(error){\n        if (error){\n            cb(error);\n        }else{\n\n            // prepare\n            if (process.stdin.isTTY){\n                process.stdin.setRawMode(true);\n            }\n            \n            process.stdin.setEncoding('utf8');\n\n            // pass-through\n            process.stdin.on('data', function(data){\n                // ctrl-c\n                if (data == '\\u0003'){\n                    this.device.close();\n                    cb(null);\n                    process.exit();\n                }\n                this.device.write(data);\n            }.bind(this));\n\n            // run connect handler ?\n            if (this.connectHandler){\n                this.connectHandler.apply(this.connectHandler, [this.device]);\n            }\n        }\n    }.bind(this));\n};\n\n// close instance\nSerialTerminal.prototype.close = function(){\n    if (this.device.isOpen()){\n        this.device.close();\n    }\n};\n\n// get Serial Connection\nSerialTerminal.prototype.getDevice = function(){\n    return this.device;\n};\n\nmodule.exports = SerialTerminal;","/home/travis/build/npmtest/node-npmtest-nodemcu-tool/node_modules/nodemcu-tool/bin/nodemcu-tool.js":"#!/usr/bin/env node\n\n// Manages User CLI interactions\n\n// load utils\nvar _cli = require('commander');\nvar _progressbar = require('cli-progress');\nvar _pkg = require('../package.json');\nvar _prompt = require('prompt');\nvar _nodemcutool = require('../lib/NodeMCU-Tool');\nvar _luaCommandBuilder = require('../lib/LuaCommandBuilder');\nvar _colors = require('colors');\nvar _fs = require('fs');\nvar _loggingFacility = require('logging-facility');\nvar _logger = _loggingFacility.getLogger('NodeMCU-Tool');\n\n// silent mode flag\nvar silentModeEnabled = false;\n\n// set the logging backend/upstream\n// every log message is passed to this function\n_loggingFacility.setBackend(function(facility, level, args){\n    // args to string\n    args = args.map(function(s){\n        return s.toString();\n    });\n\n    // log, info, debug\n    if (level > 5){\n        // only display messages in normal operation mode\n        if (silentModeEnabled !== true){\n            console.log(_colors.cyan('[' + facility.trim() + ']'), args.join(' '));\n        }\n\n        // errors\n    }else{\n        console.log(_colors.red('[' + facility.trim() + ']'), args.join(' '));\n    }\n});\n\n// general content\n_nodemcutool.onOutput(function(message){\n    console.log(message);\n});\n\nfunction cliPrepare(options){\n    // default\n    options = options || {};\n\n    // silent mode enabled by flag ?\n    silentModeEnabled = (_cli.silent===true);\n\n    // silent mode enabled by json output format ?\n    if (options.json && options.json === true){\n        silentModeEnabled = true;\n    }\n\n    // silent mode enabled by json raw format ?\n    if (options.raw && options.raw === true){\n        silentModeEnabled = true;\n    }\n\n    // merge global flags, command flags and global defaults\n    var defaultConfig = {\n        // global flags\n        baudrate:           _cli.baud           || '115200',\n        port:               _cli.port           || '/dev/ttyUSB0',\n        connectionDelay:    _cli.connectionDelay || 0,\n\n        // command specific flags\n        optimize:   options.optimize    || false,\n        compile:    options.compile     || false,\n        keeppath:   options.keeppath    || false,\n        remotename: options.remotename  || null,\n        run:        options.run         || false,\n        all:        options.all         || false,\n        json:       options.json        || false,\n        raw:        options.raw         || false,\n        softreset:  options.softreset   || false\n    };\n\n    // project based configuration\n    try{\n        // try to load project based configuration\n        var data = _fs.readFileSync('.nodemcutool', 'utf8');\n\n        if (data){\n            // decode json based data\n            var d = JSON.parse(data);\n\n            // extract values\n            defaultConfig.baudrate = d.baudrate || defaultConfig.baudrate;\n            defaultConfig.port = d.port || defaultConfig.port;\n            defaultConfig.optimize = (d.optimize && d.optimize === true);\n            defaultConfig.compile = (d.compile && d.compile === true);\n            defaultConfig.keeppath = (d.keeppath && d.keeppath === true);\n            _logger.log('Project based configuration loaded');\n        }\n    }catch (err){\n    }\n\n    // set port/baud options\n    _nodemcutool.setOptions({\n        device: defaultConfig.port,\n        baudrate: defaultConfig.baudrate,\n        connectionDelay: defaultConfig.connectionDelay\n    });\n\n    return defaultConfig;\n}\n\n\n// CLI setup\n_cli\n    // read file version package.json\n    .version(_pkg.version)\n\n    // serial port device\n    .option('-p, --port <port>', 'Serial port device name e.g. /dev/ttyUSB0, COM1', null)\n\n    // serial port baudrate\n    .option('-b, --baud <baudrate>', 'Serial Port Baudrate in bps, default 115200', null)\n\n    // silent mode - no status messages are shown\n    .option('--silent', 'Enable silent mode - no status messages are shown', false)\n\n    // connection delay between opening the serial device and starting the communication\n    .option('--connection-delay <delay>', 'Connection delay between opening the serial device and starting the communication', 0);\n\n_cli\n    .command('fsinfo')\n    .description('Show file system info (current files, memory usage)')\n\n    // json output mode\n    .option('--json', 'Display output JSON encoded', false)\n\n    // raw output mode\n    .option('--raw', 'Display output as simple text with tab delimiter', false)\n\n    .action(function(opt){\n        var options = cliPrepare(opt);\n\n        // output format\n        var format = 'human';\n\n        // json format ?\n        if (options.json){\n            format = 'json';\n        }\n\n        // raw format (text)\n        if (options.raw){\n            format = 'raw';\n        }\n\n        _nodemcutool.fsinfo(format);\n    });\n\n_cli\n    .command('run <file>')\n    .description('Executes an existing .lua or .lc file on NodeMCU')\n    .action(function(filename, opt){\n        var options = cliPrepare(opt);\n\n        _nodemcutool.run(filename);\n    });\n\n_cli\n    .command('upload [files...]')\n    .description('Upload Files to NodeMCU (ESP8266) target')\n\n    // file cleanup\n    .option('-o, --optimize', 'Removes comments and empty lines from file before uploading', false)\n\n    // compile files after upload\n    .option('-c, --compile', 'Compile Lua file to bytecode (.lc) and remove the original file after upload', false)\n\n    // keep-path\n    .option('-k, --keeppath', 'Keep a relative file path in the destination filename (i.e: static/test.html will be named static/test.html)', false)\n\n    // sets the remote filename\n    .option('-n, --remotename <remotename>', 'Set destination file name. Default is same as original. Only available when uploading a single file!', false)\n\n    .action(function(localFiles, opt){\n        var options = cliPrepare(opt);\n\n        // initialize a new progress bar\n        var bar = new _progressbar.Bar({\n            format: 'Upload Status {percentage}% [{bar}] | ETA {eta}s',\n            clearOnComplete: true\n        });\n\n        // files provided ?\n        if (localFiles.length == 0){\n            _logger.error('No files provided for upload (empty file-list)');\n            return;\n        }\n\n        // handle multiple uploads\n        var currentFileNumber = 0;\n\n        _nodemcutool.upload(localFiles, options, function(current, total, fileNumber){\n\n            // new file ?\n            if (currentFileNumber != fileNumber){\n                bar.stop();\n                currentFileNumber = fileNumber;\n                bar.start(total, 1);\n            }else{\n\n                bar.update(current);\n\n                // finished ?\n                if (current >= total) {\n                    bar.stop();\n                }\n            }\n        });\n    });\n\n_cli\n    .command('download <file>')\n    .description('Download files from NodeMCU (ESP8266) target')\n\n    .action(function(remoteFilename, opt){\n        var options = cliPrepare(opt);\n\n        _nodemcutool.download(remoteFilename);\n    });\n\n_cli\n    .command('remove <file>')\n    .description('Removes a file from NodeMCU filesystem')\n    .action(function(filename, opt){\n        var options = cliPrepare(opt);\n\n        _nodemcutool.remove(filename);\n    });\n\n_cli\n    .command('mkfs')\n    .description('Format the SPIFFS filesystem - ALL FILES ARE REMOVED')\n\n    // force fs creation without prompt\n    .option('--noninteractive', 'Execute command without user interaction', false)\n\n    .action(function(opt){\n        var options = cliPrepare(opt);\n\n        // no prompt!\n        if (opt.noninteractive){\n            // format\n            _nodemcutool.mkfs();\n\n            return;\n        }\n\n        // user confirmation required!\n        _prompt.start();\n        _prompt.message = '';\n        _prompt.delimiter = '';\n        _prompt.colors = false;\n\n        _prompt.get({\n            properties: {\n                confirm: {\n                    pattern: /^(yes|no|y|n)$/gi,\n                    description: _colors.cyan('[NodeMCU-Tool]') + ' Do you really want to format the filesystem and delete all file ?',\n                    message: 'Type yes/no',\n                    required: true,\n                    default: 'no'\n                }\n            }\n        }, function (err, result){\n            if (err){\n                _logger.error('Formatting aborted');\n                return;\n            }\n\n            // transform to lower case\n            var c = result.confirm.toLowerCase();\n\n            // check\n            if (c!='y' && c!='yes'){\n                _logger.error('Formatting aborted');\n                return;\n            }\n\n            // format\n            _nodemcutool.mkfs();\n        });\n\n    });\n\n\n_cli\n    .command('terminal')\n    .description('Opens a Terminal connection to NodeMCU')\n    .option('--run <filename>', 'Running a file on NodeMCU before starting the terminal session', false)\n    .action(function(opt){\n        var options = cliPrepare(opt);\n\n        // run a initial command on startup ?\n        var initialCommand = null;\n        if (options.run){\n            initialCommand = _luaCommandBuilder.prepare('run', [options.run]);\n        }\n\n        // start terminal session\n        _nodemcutool.terminal(initialCommand);\n    });\n\n_cli\n    .command('init')\n    .description('Initialize a project-based Configuration (file) within current directory')\n    .action(function(opt){\n        var options = cliPrepare(opt);\n\n        _logger.log('Creating project based configuration file..');\n\n        // get user input\n        _prompt.start();\n        _prompt.message = '';\n        _prompt.delimiter = '';\n        _prompt.colors = false;\n\n        _prompt.get({\n            properties: {\n                baudrate: {\n                    pattern: /^\\d+$/,\n                    description: _colors.cyan('[NodeMCU-Tool]') + ' Baudrate in Bit per Seconds, e.g. 9600 (default)',\n                    required: false,\n                    message: 'Only Integers allowed!',\n                    default: 9600\n                },\n                port: {\n                    pattern: /^.+$/,\n                    description: _colors.cyan('[NodeMCU-Tool]') + ' Serial connection to use, e.g. COM1 or /dev/ttyUSB2',\n                    required: false,\n                    default: '/dev/ttyUSB0'\n                }\n            }\n        }, function (err, data){\n\n            if (err){\n                _logger.error(err);\n            }else{\n                // set defaults\n                data.optimize = false;\n                data.compile = false;\n                data.keeppath = false;\n\n                // write config to file\n                _fs.writeFileSync('.nodemcutool', JSON.stringify(data, null, 4));\n            }\n        });\n    });\n\n_cli\n    .command('devices')\n    .description('Shows a list of all available NodeMCU Modules/Serial Devices')\n\n    // disable the device filter based on vendorId's of common NodeMCU modules\n    .option('--all', 'Show all Serial Devices, not only NodeMCU Modules', false)\n\n    // json output mode\n    .option('--json', 'Display output JSON encoded', false)\n\n\n    .action(function(opt){\n        var options = cliPrepare(opt);\n\n        _nodemcutool.devices(options.all, options.json);\n    });\n\n_cli\n    .command('reset')\n    .description('Execute a Hard-Reset of the Module using DTR/RTS reset circuit')\n\n    // softreset mode\n    .option('--softreset', 'Resets the module using node.restart() command', false)\n\n\n    .action(function(opt){\n        var options = cliPrepare(opt);\n\n        // software reset\n        if (options.softreset){\n            _nodemcutool.softreset();\n\n        // hard-reset nRST\n        }else{\n            _nodemcutool.reset();\n        }\n\n    });\n\n_cli\n    .command('*')\n    .action(function(c){\n        _logger.error('Unknown command \"' + c + '\"');\n        _cli.outputHelp();\n    });\n\n// run the commander dispatcher\n_cli.parse(process.argv);\n\n// default action (no command provided)\nif (!process.argv.slice(2).length) {\n    _cli.outputHelp();\n}\n"}